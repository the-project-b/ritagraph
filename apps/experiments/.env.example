GITHUB_TOKEN=ghp_

# 1. Evaluator Service Configuration
#------------------------------------------------
# The port for the evaluator server.
PORT=4000

# A secret token you define to secure the evaluator's GraphQL API.
API_TOKEN=secret


# 2. LangSmith & LangFuseConfiguration
#------------------------------------------------
# Required by the langsmith SDK to trace and log your evaluation runs.
LANGCHAIN_TRACING_V2=true
LANGSMITH_ENDPOINT="https://eu.api.smith.langchain.com"
LANGSMITH_API_KEY="lsv2_pt_"
LANGSMITH_PROJECT="evaluators"
# We now use LangFuse to do the prompt management and possibly the evaluator run in the future
PROMPT_SOURCE="langfuse"
LANGFUSE_TARGET_LABEL="latest"
LANGFUSE_SECRET_KEY="sk-lf-..."
LANGFUSE_PUBLIC_KEY="pk-lf-..."
LANGFUSE_BASE_URL="https://cloud.langfuse.com"




# 3. OpenAI Configuration
#------------------------------------------------
# Required by the openevals library for the default "judge" model.

OPENAI_API_KEY="sk-svcacct-"


# 4. Rita Dependency Configuration
#------------------------------------------------
# This is required by the underlying 'rita' graph library.
# It seems to point to another GraphQL endpoint used for its internal MCP (Meta-Cognitive Protocol).
# If you don't know what this is, you may be able to set it to a placeholder like "http://localhost:9999/graphql"
# if it's not strictly needed for the evaluation task.
PROJECTB_GRAPHQL_ENDPOINT="http://localhost:3002/graphqlapi"
GRAPHQL_MCP_ENDPOINT="http://localhost:2999/sse"


# 5. Logging Configuration (@the-project-b/logging)
#------------------------------------------------
# Core logging settings

# Log level: trace, debug, info, warn, error, fatal
# Default: info
LOG_LEVEL=info

# Output format: json, pretty, compact
# - json: Structured JSON logs (best for production)
# - pretty: Human-readable colored output (best for development)
# - compact: Single-line pretty format
# Default: pretty (development), json (production)
LOGGING_OUTPUT_FORMAT=pretty

# GraphQL Operation Logging
# - false: Disable GraphQL logging
# - true: Log basic operation info (operation type, name, duration)
# - verbose: Include full query and variables (redacted if sensitive)
# Default: false
LOGGING_LOG_GRAPHQL=true

# HTTP Request/Response Logging
# Enable logging of incoming HTTP requests (method, path, headers, body)
# Headers are always sanitized (authorization, cookie, etc. are redacted)
# Default: false
LOGGING_LOG_HTTP_REQUESTS=false

# Enable logging of HTTP responses (status code, duration)
# Automatically uses appropriate log level (error for 5xx, warn for 4xx, info for 2xx/3xx)
# Default: false
LOGGING_LOG_HTTP_RESPONSES=false

# Security & Privacy Settings

# Automatically redact sensitive fields in logs (password, token, apiKey, etc.)
# Set to false only in secure development environments
# Default: true (recommended)
LOGGING_REDACT_SENSITIVE=true

# Advanced Features

# Include caller information in logs (file, line number, function name)
# Useful for debugging but adds overhead
# Default: false
LOGGING_INCLUDE_CALLER=false

# HTTP header name to extract correlation IDs for request tracing
# Used to track requests across distributed systems
# Default: x-correlation-id
LOGGING_CORRELATION_ID_HEADER=x-correlation-id

# Performance Optimization

# Sampling rate for non-error logs (0.0 to 1.0)
# - 1.0: Log everything (default)
# - 0.5: Log 50% of events randomly
# - 0.1: Log 10% of events (high-traffic production)
# Errors are always logged regardless of sampling
# Default: 1.0
LOGGING_SAMPLE_RATE=1.0

# Pretty Format Options (only apply when LOGGING_OUTPUT_FORMAT=pretty)

# Enable colored output in pretty format
# Default: true
LOGGING_COLOR=true

# Force single-line output in pretty format
# Default: false
LOGGING_SINGLE_LINE=false

# Time format for pretty logs
# - SYS:standard: System locale format (default)
# - SYS:HH:MM:ss: Time only
# - UTC:yyyy-mm-dd HH:MM:ss: UTC timestamp
# - false: Disable timestamps
# Default: SYS:standard
LOGGING_TRANSLATE_TIME=SYS:standard