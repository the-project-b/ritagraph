/*
 * Example: How to create a new strongly-typed evaluator
 * 
 * Steps to add this evaluator:
 * 1. Rename this file to remove .example extension
 * 2. Register in core/registry.ts
 * 3. Export from index.ts
 */

import { createLLMAsJudge } from 'openevals';
import type { EvaluatorResult as OpenEvalsResult } from 'openevals';
import { 
  TypedEvaluator, 
  EvaluatorParams, 
  EvaluatorResult, 
  EvaluationOptions,
  CodeEvaluationInputs,
  CodeEvaluationOutputs 
} from '../core/types';

// Define a custom prompt for your evaluator
const CUSTOM_PROMPT = `You are evaluating code for quality and correctness...`;

// Define specific input/output types for this evaluator
interface ExampleInputs extends CodeEvaluationInputs {
  readonly code: string;
  readonly language: string;
}

interface ExampleOutputs extends CodeEvaluationOutputs {
  readonly result: string;
  readonly score?: number;
}

interface ExampleReferenceOutputs {
  readonly expectedResult: string;
  readonly maxScore: number;
}

export const exampleEvaluator: TypedEvaluator<
  'EXAMPLE',
  ExampleInputs,
  ExampleOutputs,
  ExampleReferenceOutputs
> = {
  config: {
    type: 'EXAMPLE',
    name: 'Example Evaluator',
    description: 'Example evaluator demonstrating strong typing',
    defaultModel: 'openai:gpt-4o-mini',
    supportsCustomPrompt: true,
    supportsReferenceKey: true,
  } as const,
  
  async evaluate(
    params: EvaluatorParams<ExampleInputs, ExampleOutputs, ExampleReferenceOutputs>,
    options: EvaluationOptions = {}
  ): Promise<EvaluatorResult> {
    const { customPrompt, model, referenceKey } = options;
    
    // Build reference outputs with proper typing
    const referenceOutputs = params.referenceOutputs
      ? {
          reference: params.referenceOutputs[referenceKey || 'expectedResult' as keyof ExampleReferenceOutputs],
        }
      : undefined;

    // Create the LLM judge
    const evaluator = createLLMAsJudge({
      prompt: customPrompt || CUSTOM_PROMPT,
      model: model || this.config.defaultModel,
      feedbackKey: 'example',
    });

    // Execute evaluation
    const evaluatorResult = await evaluator({
      inputs: params.inputs,
      outputs: params.outputs,
      referenceOutputs,
    }) as OpenEvalsResult;

    return {
      key: evaluatorResult.key,
      score: evaluatorResult.score,
      comment: evaluatorResult.comment,
      metadata: evaluatorResult.metadata,
    };
  },
} as const;

/*
 * Registration steps:
 * 
 * 1. In core/registry.ts, add import:
 *    import { exampleEvaluator } from '../implementations/example.evaluator';
 * 
 * 2. In the static block, register it:
 *    this.register(exampleEvaluator);
 * 
 * 3. In index.ts, export it:
 *    export * from './implementations/example.evaluator';
 * 
 * The evaluator will then be available via GraphQL and the factory system.
 */